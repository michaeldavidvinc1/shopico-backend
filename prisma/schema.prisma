generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  ADMIN
  SELLER
}

enum PaymentStatus {
  PENDING
  CANCELLED
  COMPLETED
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  phone         String?
  role          Role      @default(CUSTOMER)
  avatar        String?
  status        Boolean   @default(true)
  emailVerified DateTime?
  authType      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  store    Store[]
  order    Order[]
  cart     Cart[]
  Reviews  Reviews[]
  Wishlist Wishlist[]
  Log      Log[]

  @@index([role, status])
}

model Store {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  name        String
  slug        String   @unique
  description String?
  logo        String?
  banner      String?
  address     String?
  phone       String?
  status      Boolean  @default(true)
  balance     BigInt   @default(0)
  bankInfo    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product     Product[]
  order       Order[]
  transaction Transaction[]
  StoreView   StoreView[]

  @@index([userId, status])
}

model Category {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  image     Image?
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product[]
}

model Product {
  id          String   @id @default(cuid())
  storeId     String
  store       Store    @relation(fields: [storeId], references: [id])
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  name        String
  slug        String   @unique
  description String?
  stock       Int
  image       Image[]
  price       Int
  weight      Int?
  status      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  productView ProductView[]
  orderItem   OrderItem[]
  Cart        Cart[]
  Reviews     Reviews[]
  Wishlist    Wishlist[]

  @@index([storeId, categoryId, status])
}

model ProductView {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

model Order {
  id              String        @id @default(cuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  storeId         String
  store           Store         @relation(fields: [storeId], references: [id])
  invoiceNumber   String        @unique
  totalAmount     BigInt
  shippingAddress String
  shippingCost    BigInt
  paymentStatus   PaymentStatus
  paymentMethod   String
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  orderItem   OrderItem[]
  transaction Transaction[]
  Reviews     Reviews[]

  @@index([userId, storeId, paymentStatus])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     BigInt
  subTotal  BigInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, productId])
}

model Transaction {
  id          String        @id @default(cuid())
  storeId     String
  store       Store         @relation(fields: [storeId], references: [id])
  orderId     String
  order       Order         @relation(fields: [orderId], references: [id])
  amount      BigInt
  type        String?
  status      PaymentStatus
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([storeId, status])
}

model Reviews {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  rating    Int
  comment   String?
  image     Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId, userId, rating])
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StoreView {
  id         String   @id @default(cuid())
  storeId    String
  store      Store    @relation(fields: [storeId], references: [id])
  viewsCount Int
  date       DateTime
}

model Image {
  id         String   @id @default(cuid())
  url        String
  type       String
  productId  String?
  categoryId String?  @unique
  reviewId   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  category Category? @relation(fields: [categoryId], references: [id])
  product  Product?  @relation(fields: [productId], references: [id])
  review   Reviews?  @relation(fields: [reviewId], references: [id])

  @@index([type])
}

model Log {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String
  date      DateTime
  createdAt DateTime @default(now())
}
